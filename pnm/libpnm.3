.TH libpnm 3
.SH NAME
libpnm - functions to support pnm and pam programs

.SH EXAMPLE

/* Example program fragment to read a PAM or PNM image 
   from stdin, add up the values of every sample in it 
   (I don't know why), and write the image unchanged to 
   stdout.
*/

#include <pam.h>

struct pam inpam, outpam;
unsigned int row;

pnm_init(&argc, argv);

pnm_readpaminit(stdin, &inpam, sizeof(inpam));

outpam = inpam;
outpam.file = stdout;

pnm_writepaminit(&outpam);

tuplerow = pnm_allocpamrow(&inpam);      

for (row = 0; row < inpam.height; row++) {
    unsigned int col;
    pnm_readpamrow(&inpam, tuplerow);
    for (column = 0; column < inpam.width; column++) {
        unsigned int plane;
        for (plane = 0; plane < inpam.depth; column++) {
            grand_total += tuplerow[row][column][plane];
        }           
    }
    pnm_writepamrow(&outpam, tuplerow);
}

pnm_freepamrow(tuplerow);        



.SH SYNOPSIS
.B #include <pnm.h>

.B void pnm_init( 
.BI "int *" argcP , 
.BI "char *" argv []
.B );

.B tuple ** pnm_allocpamarray(
.BI "struct pam *" pamP );

.B xel ** pnm_allocarray(
.BI "int " cols , 
.BI "int " rows );

.B tuple * pnm_allocpamrow(
.BI "struct pam *" pamP );

.B "xel * pnm_allocrow("
.BI "int " cols );

.B void pnm_freepamarray(
.BI "tuple **" tuplearray ,
.BI "struct pam *" pamP );

.B void pnm_freearray(
.BI "xel **" xels , 
.BI "int " rows );

.B void pnm_freepamrow(
.BI "tuple *" tuplerow );

.B void pnm_freerow(
.BI "xel *" xelrow ");"

.B "tuple * allocpamtuple(
.BI "struct pam *" pamP );

.B void pnm_freepamtuple(
.BI "tuple " tuple
.B );

.B void pnm_readpaminit(
.BI "FILE *" file ,
.BI "struct pam *" pamP ,
.BI "int " size );

.B void pnm_readpnminit( 
.BI "FILE *" fp , 
.BI "int *" colsP , 
.BI "int *" rowsP , 
.BI "xelval *" maxvalP , 
.BI "int *" formatP " );"

.B void pnm_readpamrow(
.BI "struct pam *" pamP ,
.BI "tuple *" tuplerow );

.B void pnm_readpnmrow( 
.BI "FILE *" fp , 
.BI "xel *" xelrow , 
.BI "int " cols , 
.br
.BI "xelval " maxval , 
.BI "int " format " );"

.B tuple ** pnm_readpam(
.BI "FILE *" file ,
.BI "struct pam *" pamP ,
.br
.BI "int " size );

.B xel ** pnm_readpnm( 
.BI "FILE *" fp , 
.BI "int *" colsP , 
.BI "int *" rowsP , 
.br
.BI "xelval *" maxvalP ", "int * " formatP " );"

.B void pnm_writepaminit(
.BI "struct pam *" pamP );

.B void pnm_writepnminit( 
.B "FILE * " fp , 
.BI "int " cols , 
.BI "int " rows , 
.BI "xelval " maxval , 
.BI "int " format ,
.BI "int " forceplain );

.B void pnm_writepamrow(
.BI "struct pam *" pamP ,
.BI "const tuple *" tuplerow );

.B void pnm_writepnmrow( 
.BI "FILE *" fp ,  
.BI "xel *" xelrow , 
.BI "int "cols , 
.BI "xelval " maxval , 
.BI "int " format ,
.BI "int " forceplain " );"

.B void pnm_writepam(
.BI "struct pam *" pamP ,
.BI "const tuple * const *" tuplearray );

.B void pnm_writepnm( 
.BI "FILE *" fp , 
.BI "xel ** " xels , 
.BI "int " cols , 
.BI "int " rows , 
.BI "xelval " maxval , 
.BI "int " format ,
.BI "int " forceplain " );"

.B void pnm_checkpam(
.BI "struct pam *" pamP ,
.BI "const enum pm_check_type " check_type ,
.BI "enum pm_check_code *" retvalP );

.B void pnm_nextimage(
.BI "FILE *" file ,
.BI "int * const " eofP );

.B void pnm_check(
.BI "FILE * " file ,
.BI "const enum pm_check_type " check_type , 
.BI "const int " format , 
.BI "const int " cols , 
.BI "const int " rows ,
.BI "const xelval " maxval ,
.BI "enum pm_check_code *" retvalP );

.B void pnm_promoteformatrow( 
.BI "xel *" xelrow , 
.BI "int " cols , 
.BI "xelval " maxval , 
.BI "int " format , 
.BI "xelval " newmaxval , 
.BI "int " newformat );

.B void pnm_promoteformatrow( 
.BI "xel **" xels , 
.BI "int " cols , 
.BI "xelval " maxval , 
.BI "int " format , 
.BI "xelval " newmaxval , 
.BI "int " newformat );

.B xel pnm_whitexel( 
.BI "xelval " maxval , 
.BI "int " format );

.B xel pnm_blackxel( 
.BI "xelval " maxval , 
.BI "int " format );

.B void pnm_invertxel( 
.BI "xel *" x , 
.BI "xelval " maxval , 
.BI "int " format );

.B xel pnm_backgroundxelrow( 
.BI "xel *" xelrow , 
.BI "int " cols , 
.BI "xelval " maxval , 
.BI "int " format );

.B xel pnm_backgroundxel( 
.BI "xel **" xels , 
.BI "int " cols , 
.BI "int " rows , 
.BI "xelval " maxval , 
.BI "int " format ); 

.B void pnm_YCbCrtuple(
.BI tuple tuple ,
.BI "double *" YP ,
.BI "double *" CrP ,
.BI "double *" CbP );

.B struct pam {
.br
.B int
.I size
.br
.B int
.I len
.br
.B FILE *
.I file   
.br
.B int
.I format
.br
.B int
.I plainformat
.br
.B int
.I height
.br
.B int
.I width
.br
.B int
.I depth
.br
.B sample
.I maxval
.br
.B int
.I bytes_per_sample
.br
.B char
.IB tuple_type [256];
.B }

.B typedef ... sample;

.B typedef ... tuple;

.B typedef ... xelval;

.B typedef ... xel;

.B extern xelval pnm_pbmmaxval;

.B #define PNM_MAXMAXVAL ...

.B #define PNM_OVERALLMAXVAL ...

.B #define PNM_FORMAT ...

.B #define 
.BI PNM_ASSIGN1( x , v ) 
.B ...

.B #define 
.BI PNM_GET1( x ) 
.B ...

.B #define 
.BI PNM_EQUAL( x , y ) 
.B ...

.B #define 
.BI PAM_FORMAT_TYPE( format )
.B ...

.B #define 
.BI PNM_FORMAT_TYPE( format )
.B ...


.SH DESCRIPTION

.SS PAM VERSUS PNM FUNCTIONS

The PNM library contains two classes of functions:  The pam functions and 
the pnm functions.  The pam functions are enhancements of the pnm functions
and you should use them unless you need to be compatible with older
PNM libraries that don't have them (those released before August 2000).

The pnm functions operate on PBM, PGM, and PPM images and files.  They
are similar to the functions in the PBM, PGM, and PPM libraries,
except the pnm functions let you operate on all three, both reading
and writing, without a lot of concern for which of the three formats
you are processing.

The pam functions provide all the same functions for operating on PBM,
PGM, and PPM libraries, but also operate on the newer PAM images and
files.  The pam functions are easier to use than the pnm functions due
to improved parameter lists.

There is no separate PAM library specific to the PAM format, as there
is for PBM, PGM, and PPM.

.SS THE pam STRUCTURE

The pam functions take most of their arguments in the form of a single
.B pam
structure.  This is not an opaque object, but just a convenient way to
organize the information upon which most the functions depend.  So you
are free to access or set the elements of the structure however you 
want.  But you will find in most cases it is most convenient to call
.B pnm_readpaminit()
or
.B pnm_writepaminit()
to set the fields in the 
.B pam
structure before calling any other pam functions, and then just to
pass the structure unchanged in all future calls to pam functions.

The fields are:
.TP
.B size
The storage size in bytes of this entire structure.
.TP
.B len
The length, in bytes, of the information in this structure.  The
information starts in the first byte and is contiguous.  This cannot
be greater than 
.BR size .
.B size
and
.B len
can be used to make programs compatible with newer and older versions of
the Netpbm libraries.
.TP
.B file
The file.
.TP
.B format
The format code of the raw image.  This is 
.B PAM_FORMAT 
unless the PAM image
is really a view of a PBM, PGM, or PPM image.  Then it's
.BR PBM_FORMAT , 
.BR RPBM_FORMAT , 
etc.
.TP
.B plainformat
This is a boolean value and means:  The format above is a plain (text) format
as opposed to a raw (binary) format.  This is entirely redundant with the
.B format
member and exists as a separate member only for computational speed.
.TP
.B height
The height of the image in rows.
.TP
.B width
The width of the image in number of columns (tuples per row).
.TP
.B depth
The depth of the image (degree of or number of samples in each tuple).
.TP
.B maxval
The maxval of the image.  See definitions in pam(5).
.TP
.B bytes_per_sample
The number of bytes used to represent each sample in the image file.
See the format definition in pam(5).  This is entirely redundant with 
.BR maxval .
It exists as a separate member for computational speed.
.TP
.B tuple_type
The tuple type of the image.  See definitions in pam(5).  Netpbm does not
define any values for this except the following, which are used for a 
PAM image which is really a view of a PBM, PGM, or PPM image:
.BR PAM_PBM_TUPLETYPE , 
.BR PAM_PGM_TUPLETYPE ,
.BR PAM_PPM_TUPLETYPE .


.SS PLAIN VERSUS RAW FORMAT

The PNM formats each come in two varieties: the older plain (text)
format and the newer raw (binary) format.  There are different format
codes for the plain and raw formats, but which of the two formats the
pnm and pam functions write is independent of the format code you pass
to them.

The pam functions always write raw formats.  If you specify the format
code for a plain format, a pam function assumes instead the raw
version of that format.

The pnm functions choose between plain and raw based on the 
.I forceplain
parameter that every write-type pnm function has.  If this boolean value
is true, the function writes the plain version of the format specified 
by the format code.  If it is false, the function writes the raw version
of the format specified by the format code.

We are trying to stamp out the older plain formats, so it would be a wise
choice not to write a program that sets
.I forceplain
true under any circumstance.  A user who needs a plain format can use
the 
.B pnmtoplainpnm
program to convert the output of your program to plain format.


.SS PNM TYPES AND CONSTANTS

Each
.BR xel
contains three
.BR xelval s,
each of which should contain only the values between
.BR 0
and
.BR PNM_MAXMAXVAL , 
inclusive.
.BR pnm_pbmmaxval
is the maxval used when a PNM program reads a PBM file.
Normally it is 1; however, for some programs, a larger value gives better
results.

.SS PNM XEL MANIPULATIONS
.Ss
The 
.B PNM_GET1
macro extracts a single value from an xel, when you know it's from a
PBM or PGM file.  When it's from a PPM file, use
.BR PPM_GETR() ,
.BR PPM_GETG() ,
and
.BR PPM_GETB() .

The
.B PNM_ASSIGN1
macro assigns a single value to an xel, when you know it's from a PBM
or PGM file.  When it's from a PPM file, use
.BR PPM_ASSIGN .
The
.B
PNM_EQUAL
macro checks two xels for equality.
The
.B PNM_FORMAT_TYPE
and
.B PAM_FORMAT_TYPE
macros compute a format type code from a format code.  The format
types are PBM, PGM, PPM, and PAM.  But note that PBM, PGM, and PPM
each are two different formats: a plain one and a raw one.  So there
are four format types, but seven formats.  
.B PNM_FORMAT_TYPE
does not work on the PAM format code.

.SS INITIALIZATION
All PNM and PAM programs must call 
.B pnm_init() 
just after startup, before they process their arguments.

.BR pnm_init() ,
among other things, processes Netpbm universal parameters and removes
them from the parameter list.

.SS MEMORY MANAGEMENT
.B pnm_allocpamarray()
allocates space for an array of tuples.
.B pnm_freepamarray()
frees an array space allocated by 
.B pnm_allocpamarray()
or 
.BR pnm_readpam() .

.B pnm_allocarray()
allocates space for an array of xels.
.B pnm_freearray()
frees an array space allocated by
.B pnm_allocarray()
or 
.BR pnm_readpnm() .

.B pnm_allocpamrow() 
allocates space for a row of a PAM image.
.B pnm_freepamrow()
frees it.

.B pnm_allocrow()
allocates space for a row of a PNM image.
.B pnm_freerow()
frees it.


.SS READING PNM FILES

.B pnm_readpaminit() 
reads the header of a PAM or PNM image.  It returns the information
from the header in the
.BI * pamP
structure.  It does not require any members of
.BI * pamP
to be set at invocation, and sets every member.  
.I size
is the storage size of the
.BI * pamP
structure, normally
.BR "sizeof(struct pam)" .

The function expects to find the image file positioned to the start of 
the header and leaves it positioned to the start of the raster.

.B pnm_readpnminit()
is similar to 
.BR pnm_readpaminit() ,
but reads only PNM images and has a different parameter list.

.B pnm_readpamrow()
reads a row of the raster from a PAM or PNM image file.  It expects all
of the members of the 
.BI *pamP
structure to be set upon invocation and does not modify any of them.  It
expects to find the file positioned to the start of the row in question in
the raster and leaves it positioned just after it.  It returns the row as
the array of tuples
.IR tuplerow , 
which must already have its column pointers set up so that it forms a C
2-dimensional array.  The leftmost tuple is Element 0 of this array.

.B pnm_readpnmrow()
is similar to
.B pnm_readpamrow()
but only works on PNM images and has a different parameter list and returns
the row as an array of xels instead of tuples.

.B pnm_readpam()
reads an entire image from a PAM or PNM image file and allocates the
space in which to return the raster.  It expects to find the file positioned
to the first byte of the image and leaves it positioned just after the image.

The function does not require
.BI * pamP
to have any of its members set and sets them all.
.I size
is the storage size in bytes of the
.BI * pamP
structure, normally 
.BR "sizeof(struct pam)" .

The return value is a newly allocated array of the rows of the image,
with the top row being Element 0 of the array.  Each row is represented
as 
.B pnm_readpamrow()
would return.

The return value is also effectively a 3-dimensional C array of
samples, with the dimensions corresponding to the height, width, and
depth of the image, in that order.

.B pnm_readpam()
combines the functions of 
.BR pnm_allocpamarray() ,
.BR pnm_readpaminit() ,
and iterations of 
.BR pnm_readpamrow() .
It may require more dynamic storage than you can afford.

.B pnm_readpnm()
is similar to
.B pnm_readpam()
except that it reads only PNM images and uses a different parameter list
and returns an array of rows such that 
.B pnm_readpnmrow() 
would return rather than such that 
.B pnm_readpamrow() 
would return.

.SS WRITING FILES

.B pnm_writepnminit()
writes the header of a PAM or PNM image and computes some of the fields of 
the pam structure.

The following members of the 
.BI * pamP
structure must be set upon invocation to tell the function how and what to
write.
.BR size ,
.BR len ,
.BR file ,
.BR format ,
.BR height , 
.BR width ,
.BR depth ,
.BR maxval ,
.BR tuple_type .

.B pnm_writepaminit()
sets the 
.B plainformat
and 
.B bytes_per_sample
members based on the information supplied.

.B pnm_writepnminit()
is similar to 
.B pnm_writepaminit()
except that it can write only a PNM header and has a different parameter list.

See the description of
.I forceplain 
above.

.B pnm_writepamrow()
writes a row of the raster into a PAM or PNM image file.  It expects to find
the file positioned where the row should start and leaves it positioned just
after the row.  The function requires all the elements of
.BI * pamP
to be set upon invocation and doesn't modify them.

.I tuplerow
is an array of tuples representing the row.  The leftmost tuple is 
Element 0 of this array.

.B pnm_writepnmrow()
is similar to 
.B pnm_writepamrow()
except that it works only on PNM images and has a different parameter
list and takes an array of xels instead of an array of tuples.  See
the description of
.I forceplain 
above.


.B pnm_writepam()
writes an entire PAM or PNM image to a PAM or PNM image file.  It
expects to find the file positioned to where the image should start
and leaves it positioned just after the image.

The following members of the 
.BI * pamP
structure must be set upon invocation to tell the function how and what to
write:
.BR size ,
.BR len ,
.BR file ,
.BR format ,
.BR height , 
.BR width ,
.BR depth ,
.BR maxval ,
.BR tuple_type .

.B pnm_writepam()
sets the 
.B plainformat
and 
.B bytes_per_sample
members based on the information supplied.

.I tuplearray
is an array of rows such that you would pass to 
.BR pnm_writepamrow() ,
with the top row being Element 0 of the array.

.B pnm_writepam()
combines the functions of 
.BR pnm_writepaminit() ,
and iterations of 
.BR pnm_writepamrow() .
It's raster input may be more storage than you can afford.

.B pnm_writepnm() 
is similar to 
.B pnm_writepam()
except that it works only on PNM image, has a different parameter
list, and takes an array of rows of xels instead of an array of rows
of tuples.  See the description of
.I forceplain 
above.

.SS MISCELLANEOUS

.B pnm_nextimage()
positions a PNM input file to the next image in it (so that a subsequent
.B pnm_readpnminit()
reads its header).

.B pnm_nextimage()
is identical to 
.BR pbm_nextimage() .

.B pam_check() 
checks for the common file integrity error where the file is the wrong
size to contain the raster, according to the information in the
header.  This works on PAM and PNM images.

.B pnm_check()
is similar to 
.B pam_check()
except it works only on PNM images.

.B pnm_check() 
is identical to 
.BR ppm_check() .


.SS PNM FORMAT PROMOTION
.B pnm_promoteformatrow()
promotes a row of xels from one maxval and format to a new set.  Use
this when you are combining multiple anymaps of different types - just
take the maximum of the maxvals and the maximum of the formats, and
promote them all to that.

.B pnm_promoteformat()
promotes an entire anymap.

.SS PNM XEL MANIPULATION
.B pnm_whitexel()
and 
.B pnm_blackxel()
return a white or black xel, respectively, for the given 
.I maxval
and 
.IR format .

.B pnm_invertxel()
inverts an xel.

.B pnm_backgroundxelrow()
figures out an appropriate background xel based on the row of xels
.IR xelrow ,
which is 
.I cols
xels wide, has maxval
.IR maxval ,
and represents an image with format
.IR format .

This estimate works best when the row is the top or bottom row of the
image.  

.B pnm_backgroundxel()
does the same thing as 
.BR pnm_backgroundxelrow() ,
except based on an entire image instead of just one row.  This tends
to do a slightly better job than
.BR pnmbackgroundxelrow() .

.B pnm_YCbCrtuple()
Returns the Y/Cb/Cr luminance/chrominance representation of the color
represented by the input tuple, assuming that the tuple is an RGB
color representation (which is the case if it was read from a PPM
image).  The output components are based on the same scale (maxval) as
the input tuple, but are floating point nonetheless to avoid losing
information due to rounding.  Divide them by the maxval to get
normalized [0..1] values.


.SH "SEE ALSO"
.BR pbm (5), 
.BR pgm (5), 
.BR ppm (5), 
.BR pam (5),
.BR libpbm (3),
.BR libpgm (3),
.BR libppm (3)

.SH AUTHOR
Copyright (C) 1989, 1991 by Tony Hansen and Jef Poskanzer.
.\" Permission to use, copy, modify, and distribute this software and its
.\" documentation for any purpose and without fee is hereby granted, provided
.\" that the above copyright notice appear in all copies and that both that
.\" copyright notice and this permission notice appear in supporting
.\" documentation.  This software is provided "as is" without express or
.\" implied warranty.
